name: Build

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  DOTNET_VERSION: '6.0.x'
  SOLUTION_PATH: 'PerunNetworkManager.sln'
  BUILD_CONFIGURATION: 'Release'

jobs:
  build:
    runs-on: windows-2022
    
    strategy:
      matrix:
        platform: [x64, x86]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_PATH }}

    - name: Build solution
      run: |
        dotnet build ${{ env.SOLUTION_PATH }} `
          --configuration ${{ env.BUILD_CONFIGURATION }} `
          --platform ${{ matrix.platform }} `
          --no-restore `
          --verbosity normal

    - name: Run unit tests
      run: |
        dotnet test ${{ env.SOLUTION_PATH }} `
          --configuration ${{ env.BUILD_CONFIGURATION }} `
          --platform ${{ matrix.platform }} `
          --no-build `
          --verbosity normal `
          --logger trx `
          --collect:"XPlat Code Coverage" `
          --results-directory TestResults

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.platform }}
        path: TestResults

    - name: Publish build artifacts
      if: matrix.platform == 'x64'
      run: |
        dotnet publish src/PerunNetworkManager/PerunNetworkManager.csproj `
          --configuration ${{ env.BUILD_CONFIGURATION }} `
          --platform ${{ matrix.platform }} `
          --no-build `
          --output artifacts/publish

    - name: Upload build artifacts
      if: matrix.platform == 'x64'
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts-${{ matrix.platform }}
        path: artifacts/publish

  code-quality:
    runs-on: windows-2022
    needs: build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_PATH }}

    - name: Run code analysis
      run: |
        dotnet build ${{ env.SOLUTION_PATH }} `
          --configuration ${{ env.BUILD_CONFIGURATION }} `
          --verbosity normal `
          /p:RunAnalyzersDuringBuild=true `
          /p:TreatWarningsAsErrors=false

    - name: SonarCloud Scan
      if: github.event_name != 'pull_request'
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  security:
    runs-on: windows-2022
    permissions:
      actions: read
      contents: read
      security-events: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: csharp

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Build for CodeQL
      run: |
        dotnet restore ${{ env.SOLUTION_PATH }}
        dotnet build ${{ env.SOLUTION_PATH }} --configuration ${{ env.BUILD_CONFIGURATION }}

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

  notification:
    runs-on: ubuntu-latest
    needs: [build, code-quality, security]
    if: always()
    
    steps:
    - name: Build Status Notification
      if: failure()
      run: |
        echo "Build failed! Check the logs for details."
        echo "Failed jobs: ${{ needs.build.result }}, ${{ needs.code-quality.result }}, ${{ needs.security.result }}"
